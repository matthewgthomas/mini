---
title: "Matt and Tam's Minis"
---

```{r}
#| label: Parameters/variables
#| include: false
matt_colour <- "#fd7e14"
tam_colour <- "#0dcaf0"
```

```{r}
#| label: Load libraries and data
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(plotly)
```

```{r}
#| label: Helpful functions
#| message: false
#| warning: false
#| include: false
date_formatter <- function(d) {
  paste0(day(d), " ", month.name[month(d)], " ", year(d))
}

# Convert "minutes:seconds" string to seconds (numeric)
convert_to_seconds <- function(time_vec) {
  parts <- str_split(time_vec, ":", simplify = TRUE)  # Split into minutes & seconds
  minutes <- as.numeric(parts[,1])
  seconds <- as.numeric(parts[,2])
  return(dseconds(minutes * 60 + seconds))  # Convert to duration
}

# Convert seconds (numeric) to "minutes:seconds"
convert_seconds_to_time_string <- function(seconds) {
  minutes <- floor(seconds / 60)  # Extract whole minutes
  sec <- seconds %% 60            # Get remaining seconds
  
  # Format seconds to always be two digits
  formatted_time <- sprintf("%d:%02d", minutes, sec)
  
  return(formatted_time)
}
```

```{r}
#| label: Load and wrange data
#| message: false
#| warning: false
#| include: false
mini <- read_csv("https://docs.google.com/spreadsheets/d/1xdZ_8xLhYMizss7Z3XwB2xxhkTohuRK6GF8x9au2cZ0/export?format=csv")

mini <- mini |> 
  mutate(
    Matt_seconds = convert_to_seconds(Matt),
    Tam_seconds = convert_to_seconds(Tam),
    Diff = abs(Matt_seconds - Tam_seconds),
    
    Matt = convert_seconds_to_time_string(Matt_seconds),
    Tam = convert_seconds_to_time_string(Tam_seconds),
    
    Weekday = factor(Weekday, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"), ordered = TRUE)
  )

player_times <- 
  mini |> 
  select(Date, Weekday, Matt_time = Matt, Tam_time = Tam, Matt_seconds, Tam_seconds) |> 
  pivot_longer(
    cols = c(Matt_time, Tam_time, Matt_seconds, Tam_seconds), 
    names_to = c("Player", ".value"), 
    names_pattern = "(Matt|Tam)_(.*)"
  )
```

```{r}
#| label: Summary stats
#| include: false
num_games <- nrow(mini)

matt_won <- nrow(mini[mini$Winner == "Matt",])
tam_won <- nrow(mini[mini$Winner == "Tam",])
draws <- nrow(mini[mini$Winner == "Draw",])

current_leader <- ifelse(matt_won > tam_won, "Matt", "Tam")
current_leading_by <- ifelse(matt_won > tam_won, matt_won, tam_won)
current_trailing_by <- ifelse(matt_won > tam_won, tam_won, matt_won)
```

As of `r today()`, Tam and Matt have played `r num_games` games.

After `r num_games` Minis, **`r current_leader`** is leading `r current_leading_by` to `r current_trailing_by` (with `r draws` draw`r ifelse(draws>1, "s", "")`).

```{r}
#| label: Chart comparing numbers/proportions of wins
#| echo: false
#| message: false
#| warning: false
games_summary <- 
  mini |> 
  count(Winner) |> 
  mutate(prop = n / sum(n)) |> 
  
  # Label for bars
  mutate(label = ifelse(
    Winner == "Draw",
    "",
    str_glue("{Winner}: {n} ({scales::percent(prop, accuracy = 1)})")
  )) |> 
  
  # Label for tooltips
  mutate(tooltip = ifelse(
    Winner == "Draw",
    str_glue("Matt and Tam have drawn {n} {ifelse(n==1, 'Mini', 'Minis')} ({scales::percent(prop, accuracy = 0.1)}) so far"),
    str_glue("{Winner} has won {n} of {num_games} Minis ({scales::percent(prop, accuracy = 0.1)}) so far")
  ))

plt_games_summary <- 
  games_summary |> 
  ggplot(
    aes(
      x = "1", 
      y = prop,
      fill = reorder(Winner, prop),
      label = label,
      text = tooltip
    )
  ) +
  geom_col(show.legend = FALSE) +
  geom_text(size = 3, position = position_stack(vjust = 0.5)) +
  coord_flip() +
  theme_minimal() +
  theme(
    panel.grid = element_blank(),
    axis.text = element_blank()
  ) +
  labs(
    x = NULL,
    y = NULL
  )

ggplotly(plt_games_summary, height = 150, tooltip = "text") |> 
  config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = list(
      "zoom",
      "pan",
      "select",
      "zoomIn",
      "zoomOut",
      "autoScale",
      "resetScale",
      "lasso2d",
      "hoverClosestCartesian",
      "hoverCompareCartesian"
    )
  ) |> 
  layout(showlegend = FALSE)
```

# Speed

```{r}
#| label: Calculate speed of games
#| message: false
#| warning: false
#| include: false
fastest_game <- 
  player_times |> 
  filter(seconds == min(seconds))

slowest_game <- 
  player_times |> 
  filter(seconds == max(seconds))

# Does the same person hold both records?
same_person <- fastest_game$Player == slowest_game$Player

# What was our closest game?
closest_game <- 
  mini |> 
  filter(Diff > 0) |> 
  filter(Diff == min(Diff))
```

**`r fastest_game$Player`** holds the record for the fastest Mini, completing it in **`r fastest_game$time`** on `r date_formatter(fastest_game$Date)`.

**`r slowest_game$Player`** `r ifelse(same_person, "also", "")` played the slowest game: a sluggish **`r slowest_game$time`** on `r date_formatter(slowest_game$Date)`.

Other than the draw`r ifelse(draws>1, "s", "")`, our closest game was won by **`r closest_game$Winner`** by a mere `r closest_game$Diff` second`r ifelse(closest_game$Diff>1, "s", "")`.

```{r}
#| label: How close are our games?
#| echo: false
#| message: false
#| warning: false
# Make a dumbbell plot connecting Matt and Tam's times
plt_closeness <- 
  mini |> 
  ggplot(aes(x = Date, y = Matt_seconds, xend = Date, yend = Tam_seconds)) +
  geom_segment(size = 0.5) +
  geom_point(aes(text = str_glue("Matt completed the Mini in {Matt} on {date_formatter(Date)}")), colour = matt_colour, size = 2) +
  geom_point(aes(y = Tam_seconds, text = str_glue("Tam completed the Mini in {Tam} on {date_formatter(Date)}")), colour = tam_colour, size = 2) +
  theme_minimal() +
  labs(
    x = NULL,
    y = "Time to finish Mini (seconds)"
  )

ggplotly(plt_closeness, tooltip = "text") |> 
  config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = list(
      #"zoom",
      "pan",
      "select",
      #"zoomIn",
      #"zoomOut",
      "autoScale",
      #"resetScale",
      "lasso2d",
      "hoverClosestCartesian",
      "hoverCompareCartesian"
    )
  ) |> 
  layout(hovermode = "x")
```

# Performance

```{r}
#| label: Mini completion times by weekday
#| message: false
#| warning: false
#| include: false
player_times_summary <- 
  player_times |> 
  group_by(Weekday, Player) |> 
  summarise(
    mean_seconds = duration(round(mean(seconds), 0)),
    sd_seconds = duration(round(sd(seconds), 0))
  ) |> 
  ungroup() |> 
  mutate(mean_seconds_string = convert_seconds_to_time_string(duration(mean_seconds)))

# When are we fastest?
fastest_mean_times <- 
  player_times_summary |> 
  group_by(Player) |> 
  filter(mean_seconds == min(mean_seconds))

fastest_day_matt <- as.character(fastest_mean_times[fastest_mean_times$Player == "Matt",]$Weekday)
fastest_mean_time_matt <- fastest_mean_times[fastest_mean_times$Player == "Matt",]$mean_seconds_string

fastest_day_tam <- as.character(fastest_mean_times[fastest_mean_times$Player == "Tam",]$Weekday)
fastest_mean_time_tam <- fastest_mean_times[fastest_mean_times$Player == "Tam",]$mean_seconds_string

# Are we fastest on the same day?
same_fastest_day <- fastest_day_matt == fastest_day_tam
```

```{r}
#| echo: false
#| results: asis

if (same_fastest_day) {
  str_glue("**Tam** and **Matt** both tend to have their fastest Mini completion times on {fastest_day_tam}s.")
} else {
  str_glue("**Tam's** fastest Mini completion times tend to be on {fastest_day_tam}s, while **Matt** is faster on {fastest_day_matt}s, on average.")
}
```

The chart below shows the spread of our completion times on each day of the week. Each dot represents one Mini; the Xs represent our average completion times on a given day.

```{r}
#| label: Plot weekday completion times
#| echo: false
#| message: false
#| warning: false
plt_weekdays <- 
  player_times |> 
  mutate(Weekday = fct_rev(Weekday)) |> 
  
  ggplot(aes(x = Weekday, y = seconds, colour = Player)) +
  geom_point(aes(text = str_glue("{Player} finished this Mini in {time}")), position = position_jitterdodge(), show.legend = FALSE) +
  geom_point(data = player_times_summary, aes(y = mean_seconds, text = str_glue("{Player}'s average time to complete Minis on {Weekday}s is {mean_seconds_string}")), shape = 4, size = 3, position = position_jitterdodge(), show.legend = FALSE) +
  coord_flip() +
  scale_colour_manual(values = c(Matt = matt_colour, Tam = tam_colour)) +
  theme_minimal() +
  labs(
    x = NULL,
    y = "Completion time (seconds)"
  )

ggplotly(plt_weekdays, tooltip = "text") |> 
  config(
    displayModeBar = TRUE,
    displaylogo = FALSE,
    modeBarButtonsToRemove = list(
      #"zoom",
      "pan",
      "select",
      #"zoomIn",
      #"zoomOut",
      "autoScale",
      #"resetScale",
      "lasso2d",
      "hoverClosestCartesian",
      "hoverCompareCartesian"
    )
  ) |> 
  layout(showlegend = FALSE)
```

```{r}
#| label: Mini completion times by weekday - deviations
#| message: false
#| warning: false
#| include: false
# When are we least consistent? (based on standard deviations)
largest_deviations <- 
  player_times_summary |> 
  group_by(Player) |> 
  filter(sd_seconds == max(sd_seconds))

most_variable_day_matt <- as.character(largest_deviations[largest_deviations$Player == "Matt",]$Weekday)

most_variable_day_tam <- as.character(largest_deviations[largest_deviations$Player == "Tam",]$Weekday)

times_on_most_variable_day_matt <- 
  player_times |> 
  filter(Player == "Matt" & Weekday == most_variable_day_matt) |> 
  summarise(
    fastest = min(seconds),
    slowest = max(seconds)
  )

times_on_most_variable_day_tam <- 
  player_times |> 
  filter(Player == "Tam" & Weekday == most_variable_day_tam) |> 
  summarise(
    fastest = min(seconds),
    slowest = max(seconds)
  )

# Are we fastest on the same day?
same_variable_day <- most_variable_day_matt == most_variable_day_tam
```

```{r}
#| echo: false
#| results: asis

if (same_variable_day) {
  fastest_overall <- min(times_on_most_variable_day_tam$fastest, times_on_most_variable_day_matt$fastest)
  
  slowest_overall <- max(times_on_most_variable_day_tam$slowest, times_on_most_variable_day_matt$slowest)
  
  str_glue("Both of us are least consistent on {most_variable_day_tam}s, with completion times as quick as {convert_seconds_to_time_string(fastest_overall)} and as slow as {convert_seconds_to_time_string(slowest_overall)}.")
  
} else {
  str_glue("**Tam's** performance tends to be least consistent on {most_variable_day_tam}s, where she can be as quick as {convert_seconds_to_time_string(times_on_most_variable_day_tam$fastest)} or as slow as {convert_seconds_to_time_string(times_on_most_variable_day_tam$slowest)}. Matt is least consistent on {most_variable_day_matt}s, with times ranging from {convert_seconds_to_time_string(times_on_most_variable_day_matt$fastest)} to {convert_seconds_to_time_string(times_on_most_variable_day_matt$slowest)}.")
}
```

# Streaks
